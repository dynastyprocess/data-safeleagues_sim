library(ffsimulator)
library(ffscrapr)
library(furrr)
library(tidyverse)
mfl_getendpoint(mfl_connect(2022),"leagueSearch",SEARCH = "SafeLeague")
x <- mfl_getendpoint(mfl_connect(2022),"leagueSearch",SEARCH = "SafeLeague")
x <- mfl_getendpoint(mfl_connect(2022),"leagueSearch",SEARCH = "SafeLeague") |>
purrr::pluck("content")
x <- mfl_getendpoint(mfl_connect(2022),"leagueSearch",SEARCH = "SafeLeague") |>
purrr::pluck("content","leagues","league") |>
tibble::tibble()
View(x)
x <- mfl_getendpoint(mfl_connect(2022),"leagueSearch",SEARCH = "SafeLeague") |>
purrr::pluck("content","leagues","league") |>
data.table::rbindlist()
View(x)
runif(1)
x <- mfl_getendpoint(mfl_connect(2022),"leagueSearch",SEARCH = "SafeLeague") |>
purrr::pluck("content","leagues","league") |>
data.table::rbindlist() |>
mutate(conn = map(id, ~mfl_connect(2022,.x,user_agent = paste0("dynastyprocess/",runif(1)),rate_limit = FALSE)))
library(ffsimulator)
library(ffscrapr)
library(furrr)
library(tidyverse)
source("~/.active-rstudio-document", echo=TRUE)
x <- mfl_getendpoint(mfl_connect(2022),"leagueSearch",SEARCH = "SafeLeague") |>
purrr::pluck("content","leagues","league") |>
data.table::rbindlist() |>
mutate(conn = map(id, ~mfl_connect(2022,.x,user_agent = paste0("dynastyprocess/",runif(1)),rate_limit = FALSE)))
ff_simulate(x$conn[[1]])
sim_league <- function(conn, p){
ffscrapr:::.fn_set_useragent(paste0("dynastyprocess/",runif(1)))
sim <- ff_simulate(conn,n_seasons = 250,seed = 613,verbose = FALSE)
saveRDS(sim,glue::glue("sims/{conn$league_id}"))
p()
invisible(NULL)
}
progressr::progressor(steps = nrow(x))
sim_league <- function(conn, p){
ffscrapr:::.fn_set_useragent(paste0("dynastyprocess/",runif(1)))
sim <- ff_simulate(conn,n_seasons = 250,seed = 613,verbose = FALSE)
saveRDS(sim,glue::glue("sims/{conn$league_id}"))
p()
invisible(NULL)
}
memoise::memoise(sim_league, cache = cachem::cache_disk("cache"))
plan(multisession)
sim_league <- function(conn, p){
ffscrapr:::.fn_set_useragent(paste0("dynastyprocess/",runif(1)))
sim <- ff_simulate(conn,n_seasons = 250,seed = 613,verbose = FALSE)
saveRDS(sim,glue::glue("sims/{conn$league_id}"))
p()
invisible(NULL)
}
library(furr)
library(furrr)
plan(multisession)
x <- list.files("sims", full.names = TRUE) |>
future_map_dfr(~readRDS(.x)$summary_season)
source("~/GitHub/_dynastyprocess/safeleagues_simulator/sim_job.R", echo=TRUE)
source("~/GitHub/_dynastyprocess/safeleagues_simulator/sim_job.R", echo=TRUE)
library(ffsimulator)
library(ffscrapr)
library(furrr)
library(tidyverse)
x <- mfl_getendpoint(mfl_connect(2022),"leagueSearch",SEARCH = "SafeLeague") |>
purrr::pluck("content","leagues","league") |>
data.table::rbindlist() |>
mutate(conn = map(id, ~mfl_connect(2022, .x, rate_limit = FALSE)))
plan(multisession)
options(ffscrapr.cache = "filesystem")
x <- mfl_getendpoint(mfl_connect(2022),"leagueSearch",SEARCH = "SafeLeague") |>
purrr::pluck("content","leagues","league") |>
data.table::rbindlist() |>
mutate(conn = map(id, ~mfl_connect(2022, .x, rate_limit = FALSE)))
sim_league <- function(conn, p){
ffscrapr:::.fn_set_useragent(paste0("dynastyprocess/",runif(1)))
sim <- ff_simulate(conn,n_seasons = 250,seed = 613,verbose = FALSE)
saveRDS(sim$summary_season,glue::glue("sims/{conn$league_id}.rds"))
p()
sim$summary_season
}
sim_league <- function(conn){
ffscrapr:::.fn_set_useragent(paste0("dynastyprocess/",runif(1)))
sim <- ff_simulate(conn,n_seasons = 250,seed = 613,verbose = FALSE)
saveRDS(sim$summary_season,glue::glue("sims/{conn$league_id}.rds"))
# p()
message
sim$summary_season
}
source("~/GitHub/_dynastyprocess/safeleagues_simulator/sim_job.R", echo=TRUE)
sim_leagues <- function(conns){
cli::cli_progress_bar("Simulating",total = length(conn))
sims <- furrr::future_map(x$conn,sim_league)
cli::cli_progress_done()
return(sims)
}
sim_leagues(x$conn)
source("~/GitHub/_dynastyprocess/safeleagues_simulator/sim_job.R", echo=TRUE)
source("~/GitHub/_dynastyprocess/safeleagues_simulator/sim_job.R", echo=TRUE)
sim_league <- function(conn,p){
ffscrapr:::.fn_set_useragent(paste0("dynastyprocess/",runif(1)))
sim <- ff_simulate(conn,n_seasons = 250,seed = 613,verbose = FALSE)
saveRDS(sim$summary_season,glue::glue("sims/{conn$league_id}.rds"))
p()
sim$summary_season
}
sim_leagues <- function(conns){
progressr::with_progress({
p <- progressr::progressor(steps = length(conns))
sims <- furrr::future_map(conns,sim_league,p)
})
return(sims)
}
sim_leagues(x$conn)
source("~/GitHub/_dynastyprocess/safeleagues_simulator/sim_job.R", echo=TRUE)
warnings()
x <- data.table::rbindlist(.Last.value)
x <- list.files("sim",full.names = TRUE) |> purrr::map(readRDS) |>  data.table::rbindlist()
x <- list.files("sim",full.names = TRUE) |> purrr::map_dfr(readRDS)
x <- list.files("sims",full.names = TRUE) |> purrr::map(readRDS) |>  data.table::rbindlist()
View(x)
x <- mfl_getendpoint(mfl_connect(2022),"leagueSearch",SEARCH = "SafeLeague") |>
purrr::pluck("content","leagues","league") |>
data.table::rbindlist() |>
mutate(conn = map(id, ~mfl_connect(2022, .x, rate_limit = FALSE)))
sim_league <- function(conn,p){
ffscrapr:::.fn_set_useragent(paste0("dynastyprocess/",runif(1)))
sim <- ff_simulate(conn,n_seasons = 250,seed = 613,verbose = FALSE)
saveRDS(sim$summary_season,glue::glue("sims/{conn$league_id}.rds"))
p()
sim$summary_season
}
x <- ff_simulate(x$conn[[1]])
source("~/GitHub/_dynastyprocess/safeleagues_simulator/sim_job.R", echo=TRUE)
source("~/GitHub/_dynastyprocess/safeleagues_simulator/sim_job.R", echo=TRUE)
source("~/GitHub/_dynastyprocess/safeleagues_simulator/sim_job.R", echo=TRUE)
x <- mfl_getendpoint(mfl_connect(2022),"leagueSearch",SEARCH = "SafeLeague") |>
purrr::pluck("content","leagues","league") |>
data.table::rbindlist() |>
mutate(conn = map(id, ~mfl_connect(2021, .x, rate_limit = FALSE)))
sim_league(x$conn[[1]])
sim_league(x$conn[[1]],p = function()NULL)
debug(ff_simulate)
sim_league(x$conn[[1]],p = function()NULL)
View(latest_rankings)
library(ffsimulator)
nflreadr::ffverse_sitrep()
source("~/GitHub/_dynastyprocess/safeleagues_simulator/sim_job.R", echo=TRUE)
x <- .Last.value |> data.table::rbindlist()
x <- data.table::rbindlist(.Last.value)
x <- data.table::rbindlist(list(.Last.value))
data.table::rbindlist(.Last.value$value)
x <- data.table::rbindlist(.Last.value$value)
source("~/.active-rstudio-document", echo=TRUE)
View(x)
arrow::write_parquet(x,"sim_season_summaries.parquet")
